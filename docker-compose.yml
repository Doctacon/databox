version: '3.8'

services:
  # Main application container
  databox:
    build:
      context: .
      dockerfile: Dockerfile
    image: databox:latest
    container_name: databox-app
    environment:
      - DATABASE_URL=duckdb:///app/data/databox.db
      - DLT_DATA_DIR=/app/data/dlt
      - SQLMESH_PROJECT_ROOT=/app/transformations
      - LOG_LEVEL=INFO
      - EBIRD_API_TOKEN=${EBIRD_API_TOKEN}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./notebooks:/app/notebooks
      - ./.env:/app/.env:ro
    ports:
      - "3000:3000"  # Dagster UI
    command: ["dagster", "dev", "-f", "orchestration/dagster_project.py", "-h", "0.0.0.0", "-p", "3000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jupyter notebook server for analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    image: databox:latest
    container_name: databox-jupyter
    environment:
      - DATABASE_URL=duckdb:///app/data/databox.db
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./data:/app/data:ro
      - ./notebooks:/app/notebooks
      - ./.env:/app/.env:ro
    ports:
      - "8888:8888"
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''"]
    depends_on:
      - databox

  # SQLMesh UI
  sqlmesh:
    build:
      context: .
      dockerfile: Dockerfile
    image: databox:latest
    container_name: databox-sqlmesh
    environment:
      - DATABASE_URL=duckdb:///app/data/databox.db
      - SQLMESH_PROJECT_ROOT=/app/transformations/home_team
    volumes:
      - ./data:/app/data
      - ./transformations:/app/transformations
      - ./.env:/app/.env:ro
    ports:
      - "8000:8000"
    working_dir: /app/transformations/home_team
    command: ["sqlmesh", "ui", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      - databox

  # PostgreSQL for production-like setup (optional)
  postgres:
    image: postgres:16-alpine
    container_name: databox-postgres
    environment:
      - POSTGRES_USER=databox
      - POSTGRES_PASSWORD=databox
      - POSTGRES_DB=databox
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    profiles:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U databox"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage (optional)
  minio:
    image: minio/minio:latest
    container_name: databox-minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    profiles:
      - cloud
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  minio_data:
